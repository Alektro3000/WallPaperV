#version 450

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}



// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }



// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}



// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

struct Particle {
	vec4 position;
	vec2 velocity;
    vec2 id;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
    float battery;
    float Volume;
    float Random;
    vec2 Position;
    vec2 PositionPrev;
    vec2 PositionPrev2;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (binding = 3) uniform ParameterUSO {
    vec3 color;
} uso;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void updateCircle()
{
    
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];
    
    if(particleIn.id.x < 0)
    {
        vec2 rnd = vec2(random(particleIn.velocity)-0.5f,random(particleIn.velocity.yx)-0.5f);
        
        rnd = normalize(rnd);

        particlesOut[index].position.xy = vec2(0.f,0.f);
        particlesOut[index].velocity = rnd * 0.95f;
        
        particlesOut[index].id.x = particleIn.id.x + 1.f - 0.5f*random(particleIn.velocity.y);
    }
    else
    {
        particlesOut[index].position.xy = particleIn.position.xy + particleIn.velocity.xy * ubo.deltaTime/3.0f;
        
        particlesOut[index].velocity.xy = particleIn.velocity + 
            ubo.deltaTime*(particleIn.velocity.yx * vec2(0.5f, -0.5f)
            - particleIn.position.xy*0.1f);
        
        particlesOut[index].id.x = particleIn.id.x - ubo.deltaTime / 3.0f;
    }
}
void updateCorners()
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];
    
    if(particleIn.id.x < 0)
    {
        vec2 rnd = vec2(random(vec3(particleIn.position.xy,ubo.deltaTime))-0.5f,random(particleIn.position.yx)-0.5f);
        rnd += sign(rnd)*random(particleIn.velocity.x)*0.3f;
        rnd = normalize(rnd);

        vec2 pos = rnd*0.225f;
        pos.y *= 1.77f;
        pos.x += sign(rnd.x)*0.165f;
        pos += sign(rnd)*(0.625f);

        particlesOut[index].velocity = (pos) * (0.01f,0.0177f);
        particlesOut[index].position.xy = pos;
        particlesOut[index].id.x = particleIn.id.x + 1.f + random(pos);
    }
    else
    {
        particlesOut[index].position.xy = particleIn.position.xy + particleIn.velocity.xy * ubo.deltaTime;
                
        particlesOut[index].id.x = particleIn.id.x - ubo.deltaTime * 0.5f;
        
        particlesOut[index].velocity.xy = particleIn.velocity.xy + ubo.deltaTime * particleIn.position.xy * 0.01f;
        
    }
    particlesOut[index].color.a = ubo.battery;
}

void updateText()
{
    
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];
    
    if(particleIn.id.x < 0 || (particleIn.position.y > 0.72 && particleIn.id.x < 0.4))
    {
        particlesOut[index].velocity.xy = vec2(0.00f,-0.00f);
        particlesOut[index].position.xy = particleIn.color.xy;
        particlesOut[index].id.x = particleIn.id.x + 1.f - random(particleIn.position) * 0.1f;
    }
    else
    {
        particlesOut[index].position.xy = particleIn.position.xy + particleIn.velocity.xy * ubo.deltaTime;
                
        
        if(particlesOut[index].position.y < 0.72)
        {
            particlesOut[index].velocity = particleIn.velocity + ubo.deltaTime * vec2(0.00f,-0.2f);
            particlesOut[index].id.x = particleIn.id.x - ubo.deltaTime * 1.f;
        }
        else
        {
            particlesOut[index].id.x = particleIn.id.x - ubo.deltaTime * 1;
            particlesOut[index].velocity = particleIn.velocity + ubo.deltaTime * vec2(0.00f,-0.0f);
        }
    }
}

void UpdateFrames()
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];
    
    float x = ubo.Volume * ubo.Volume;

    if(particleIn.id.x < 0)
    {
        
        const vec2 fact = vec2(1920.f,1080.f) / 25.f;
        vec2 loc = vec2(random(particleIn.position.yx* ubo.Random),random(particleIn.position.xy * ubo.Random));
        
        particlesOut[index].position.xy = particleIn.color.ba * loc;
        particlesOut[index].position.xy += particleIn.color.xy;

        particlesOut[index].position.xy = round(fact * particlesOut[index].position.xy) / fact;
        
        particlesOut[index].velocity.xy = particlesOut[index].position.xy;

        particlesOut[index].id.x = particleIn.id.x + 1.f - random(particleIn.position) * 0.1f;
    }
    else
    {
        particlesOut[index].position.xy = particleIn.position.xy + mix(0.01,0.15,x) * particleIn.velocity.xy * ubo.deltaTime;
                
                    
        particlesOut[index].velocity.xy = particleIn.velocity.xy;//vec2(0.f,0.f);
        particlesOut[index].id.x = particleIn.id.x - ubo.deltaTime * mix(0.5f,1.5f,x) ;
        //* (length(particlesOut[index].position)-0.4);
    }
}

void UpdateCursor()
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];
    
    if(particleIn.id.x < 0)
    {
        vec2 rnd = vec2(random(vec4(particleIn.position.xy,ubo.deltaTime,ubo.Random))-0.5f,random(vec4(ubo.Random,particleIn.position.xy,ubo.deltaTime))-0.5f);
        rnd = normalize(rnd) * random(particleIn.position.xyxx);
        
        vec2 Prev = ubo.PositionPrev;
        vec2 Pos = ubo.Position;
        /*
        if(random(vec2(ubo.deltaTime,ubo.Random) ) > 0.5f);
        {
            Pos = Prev;
            Prev = ubo.PositionPrev2;
        }*/

        float dist = length(Prev - Pos) / ubo.deltaTime+0.01f;
        
        vec2 loc = mix(Prev,Pos,random(vec3(particleIn.velocity.xy,ubo.Random))) * 2 - vec2(1,1);
        loc += rnd * min(0.05f, max(0.05f/dist,0.02f) ) * vec2(1.f,1.77f);
        particlesOut[index].position.xy = loc;
        
        particlesOut[index].id.x = particleIn.id.x + 1.f - random(particleIn.position) * 0.1f;
    }
    else
    {
        particlesOut[index].position.xy = particleIn.position.xy + particleIn.velocity.xy * ubo.deltaTime;
        particlesOut[index].velocity.xy = normalize(particleIn.position.xy-(ubo.Position*2-vec2(1,1)))*0.1f;
        particlesOut[index].id.x = particleIn.id.x - ubo.deltaTime * 2.0f;
    }
}

void main() 
{
    float a = particlesIn[gl_GlobalInvocationID.x].id.y;
    if(a == 1.f)
        updateCircle();
    else if(a == 2.f)
        updateCorners();
    else if(a == 3.f)
        updateText();
    else if(a == 4.f)
        UpdateFrames();
    else
        UpdateCursor();
    
}